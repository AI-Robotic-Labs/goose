use anyhow::Result;
use async_trait::async_trait;
use futures::stream::BoxStream;
use serde_json::Value;

use crate::errors::AgentResult;
use crate::message::Message;
use crate::providers::base::ProviderUsage;
use crate::systems::System;

/// Core trait defining the behavior of an Agent
#[async_trait]
pub trait Agent: Send + Sync {
    /// Create a stream that yields each message as it's generated by the agent
    async fn reply(&self, messages: &[Message]) -> Result<BoxStream<'_, Result<Message>>>;

    /// Add a system to the agent
    async fn add_system(&mut self, system: Box<dyn System>) -> AgentResult<()>;

    /// Remove a system by name
    async fn remove_system(&mut self, name: &str) -> AgentResult<()>;

    /// List all systems and their status
    async fn list_systems(&self) -> AgentResult<Vec<(String, String)>>;

    /// Pass through a JSON-RPC request to a specific system
    async fn passthrough(&self, _system: &str, _request: Value) -> AgentResult<Value>;

    /// Get the total usage of the agent
    async fn usage(&self) -> AgentResult<Vec<ProviderUsage>>;
}
