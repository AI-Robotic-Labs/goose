# This workflow is main release, needs to be manually tagged & pushed.
on:
  push:
    paths-ignore:
      - 'documentation/**'
    tags:
      - "v1.*"
name: Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ------------------------------------
  # 1) Set version variables first
  # ------------------------------------
  prepare-version:
    name: Prepare Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Extract version
        id: set-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # ------------------------------------
  # 2) Update version in files
  # ------------------------------------
  update-version:
    name: Update Cargo.toml & package.json Version
    needs: [prepare-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update workspace Cargo.toml version
        run: sed -i 's/^version = ".*"/version = "'${{ needs.prepare-version.outputs.version }}'"/' Cargo.toml
      - name: Update package.json version
        run: |
          npm version ${{ needs.prepare-version.outputs.version }} --no-git-tag-version --allow-same-version
        working-directory: ui/desktop
      - name: Commit updated files
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Update versions to ${{ needs.prepare-version.outputs.version }}"
          git push

  # ------------------------------------
  # 3) Build CLI for multiple OS/Arch
  # ------------------------------------
  build-cli:
    needs: [prepare-version, update-version]
    uses: ./.github/workflows/build-cli.yml
    with:
      version: ${{ needs.prepare-version.outputs.version }}

  # ------------------------------------
  # 4) Upload Install CLI Script
  # ------------------------------------
  install-script:
    name: Upload Install Script
    runs-on: ubuntu-latest
    needs: [build-cli]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/upload-artifact@v4
        with:
          name: download_cli.sh
          path: download_cli.sh

  # ------------------------------------------------------------
  # 5) Bundle Desktop App (macOS only)
  # ------------------------------------------------------------
  bundle-desktop:
    needs: [prepare-version, update-version]
    uses: ./.github/workflows/bundle-desktop.yml
    with:
      version: ${{ needs.prepare-version.outputs.version }}
      signing: true
    secrets:
      CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  # ------------------------------------
  # 6) Create/Update GitHub Release
  # ------------------------------------
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-cli, install-script, bundle-desktop]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      # Create/update the versioned release
      - name: Release versioned
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            goose-*.tar.bz2
            Goose*.zip
            download_cli.sh
          allowUpdates: true
          omitBody: true
          omitPrereleaseDuringUpdate: true
      # Create/update the stable release
      - name: Release stable
        uses: ncipollo/release-action@v1
        with:
          tag: stable
          name: Stable
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            goose-*.tar.bz2
            Goose*.zip
            download_cli.sh
          allowUpdates: true
          omitBody: true
          omitPrereleaseDuringUpdate: true